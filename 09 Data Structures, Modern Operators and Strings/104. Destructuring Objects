'use strict';

const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],
  openingHours: {
    thu: {
      open: 12, 
      close: 22,
    },
    fri: {
      open: 12, 
      close: 22,
    },
    sat: {
      open: 12, 
      close: 22,
    },
  },
order: function(starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },

  orderDelivery: function({ starterIndex = 1, mainIndex = 0, time = '20:00', address }) {
    console.log(
      `Order received! ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} will be delivered to ${address} at ${time}`
    );
  },
};

restaurant.orderDelivery({
  time: '22: 30',
  address: 'Islamabad',
  mainIndex: 2,
  starterIndex: 2,  
});

// Other parameters will be display by default
restaurant.orderDelivery({
  address: 'Islamabad',
  starterIndex: 1,
});


const{name, openingHours, categories} = restaurant;
console.log(name, openingHours, categories);

// We can assign differnet names
const {
  name: restaurantName,
  openingHours: hours,
  categories: tags,
} = restaurant;

console.log(restaurantName, hours, tags);

// Default Values
// We can assign empty array if value doesn't exist.
const { menu = [], starterMenu: starters = [] } = restaurant;
console.log(menu, starters);

// Mutating variables(change the value of a variable at any time)
let a = 111;
let b = 777;
const obj = {a: 23, b: 7, c: 14};
// To destructure them we need to put them in paranthesis to avoid syntax error.
({a, b} = obj);
console.log(a, b);

// Nested Objects
const { 
  fri: {open: o, close: c},
   } = openingHours;
console.log(o, c);

