const oneWord = function(str){
  return str.replace(/ /g, '').toLowerCase();
}

const upperFirstWord = function (str) {
  const [first, ...others] = str.split(' ');
  return [first.toUpperCase(), ...others].join(' ');
};

// Higher Order Functions
const transformer = function (str, fn){
  console.log(`Original String ${str}`);
  console.log(`Transformed String: ${fn(str)}`);

  console.log(`Transformed by ${fn.name}`);
};
// Here we are calling callback upperFirstWord function that replaced its second parameter.
transformer('JavaScript is the best', upperFirstWord);
transformer('JavaScript is the best', oneWord);

// JS uses callbacks all the time
const high5 = function () {
  console.log('ðŸ‘‹');
};
//document.body.addEventListener('click', high5);
['Jonas', 'Martha', 'Eva'].forEach(high5);

// SUMMARY
// Callback function creates abstraction.
// Abstraction is we hide the details of code abstraction buecause we don't care about these details.
// oneWord and upperFirstWord are lower level functions
